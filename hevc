#!/usr/bin/env python3
""" Encode video files to HEVC 10Bit Video """

# $ pip3 install --user pymediainfo termcolor humanfriendly
import os
import argparse
from pymediainfo import MediaInfo as mi
from termcolor import colored
import datetime
import humanfriendly as hf
import random
import subprocess
import sys

# Valid extensions
EXTN = ['.avi', '.flv', '.mkv', '.mov', '.mp4', '.mpeg', '.mpg', '.webm', '.wmv']
PWD = os.getcwd() # Get Present Working Directory

## Function to get a list of videos from a path
#  returns a list
def get_videos(path, recur):

    videos_list = [] # List of video file with extensions as in EXTN

    # Get video files within a directory
    for root, dirs, files in os.walk(path):
        dirs.sort()
        for filename in sorted(files):
            for ext in EXTN:
                if filename.lower().endswith(ext.lower()):
                    videos_list.append(os.path.join(root, filename))
        if not recur:
            break

    return videos_list
        
## Function to get a list of dictionary records of videos with MediaInfo
#  returns a list with dictionary records
def get_videos_mi_full(videos_list, flag):

    videos_list_mi_full = [] # List of dictionary with MediaInfo
    tmp_dict1 = {} # Temporary dict to hold MI Video info
    tmp_dict2 = {} # Temporary dict to hold MI General info

    # For every video in list 'videos_list' get mediainfo in dictionary format
    for video in videos_list:
        mediainfo = mi.parse(video)
        for track in mediainfo.tracks:
            if track.track_type == 'Video':
                tmp_dict1 = {
                        "fname": video,
                        "format": track.format,
                        "width": track.width,
                        "height": track.height,
                        "duration": float(track.duration),
                        "duration_h": track.other_duration[3],
                        "framerate": float(track.frame_rate),
                        "frame_count": track.frame_count
                        }
            elif track.track_type == 'General':
                tmp_dict2 = {
                        "fsize_byte": int(track.file_size),
                        "fsize_human": track.other_file_size[0]
                        }
        tmp_dict1.update(tmp_dict2) # Join tmp_dict1 + tmp_dict2
        videos_list_mi_full.append(tmp_dict1) # Append dictionary into the list


    # According to flags remove dictionary records from list videos_list
    if flag == 'ALL':
        return videos_list_mi_full
    elif flag == 'HEVC':
        videos_list_mi_full = [rec for rec in videos_list_mi_full \
                if rec.get('format') == 'HEVC']
        return videos_list_mi_full
    if flag == 'OTHER':
        videos_list_mi_full = [rec for rec in videos_list_mi_full \
                if rec.get('format') != 'HEVC']
        return videos_list_mi_full

## Print summary information
def print_summary(video_list, path):
    count = len(video_list) # Total number of files
    videos_list_summ = [] # List of dictionary with MediaInfo
    tmp_dict1 = {} # Temporary dict to hold MI Video info
    tmp_dict2 = {} # Temporary dict to hold MI General info
    dur_s = 0.0 # Total duration, set to float
    size_b = 0  # Total size, set to int
    
    # For every video in list 'videos_list_sum' get mediainfo
    for video in video_list:
        mediainfo = mi.parse(video)
        for track in mediainfo.tracks:
            if track.track_type == 'Video':
                tmp_dict1 = {
                        "duration": float(track.duration),
                        }
            elif track.track_type == 'General':
                tmp_dict2 = {
                        "fsize_byte": int(track.file_size),
                        }
        tmp_dict1.update(tmp_dict2) # Join tmp_dict1 + tmp_dict2
        videos_list_summ.append(tmp_dict1) # Append dictionary into the list

    # Loop through list and calculate totals
    for vid in videos_list_summ:
        dur_s += vid['duration']
        size_b += vid['fsize_byte']

    dur_in_time = str(datetime.timedelta(milliseconds = dur_s)) # ms to time
    dur_in_time = dur_in_time.split('.', 1)[0] # Trim nanoseconds
    size_in_human = hf.format_size(size_b, binary=True) # Size
    path = '"' + path + '"' # Insert double quotes around path variable
    cmd = 'find ' + path + ' -type f | grep -o ".[^.]\+$" | sort | uniq -c'

    # Print summary
    if not count == 0:
        print(f"Total of {colored(count, 'yellow', attrs=['bold'])} videos, \
{colored(dur_in_time, 'yellow', attrs=['bold'])} hours of runtime, \
and {colored(size_in_human, 'yellow', attrs=['bold'])} in size.")
        os.system(cmd)
    else:
        print("No videos found.")



## Print al videos in list mode
def print_videos(video_list):
    count = len(video_list) # Total number of files
    slno = 1
    dur_s = 0.0
    size_b = 0

    if not count == 0:
        # Print header
        print(colored('SL# CODE DIMENSION   DURATION       SIZE   FILENAME', \
    'yellow', attrs=['bold']))
    
        # Loop through list and print content
        for vid in video_list:
            codec = vid['format'][:4]
            aspect = str(vid['width'])+'x'+str(vid['height'])
            dur_s += vid['duration']
            dur_h = vid['duration_h']
            size_b += vid['fsize_byte']
            size_h = vid['fsize_human']
            filename = vid['fname'].replace(PWD, '.', 1)
    
            print(f"{slno:0>3d} {codec:4s} {aspect:9s} {dur_h:12s} {size_h:>10s} \
{filename}")
            slno += 1
    
        # Print Tail
        dur_in_time = str(datetime.timedelta(milliseconds = dur_s))[:-3]
        size_in_human = hf.format_size(size_b, binary=True)
        print(colored("                   ------------ ----------", 'cyan', \
    attrs=['bold']))
        print(colored(f'{" ":18s} {dur_in_time:>12s} {size_in_human:>10s}', \
    'yellow', attrs=['bold']))
    else:
        print("No videos found.")

# Test different encoding settings for HEVC
def test_crfs(filename):
    #print(filename)
    extn = os.path.splitext(filename)[1] # Extract extension of input file
    rnd_no = subprocess.Popen("date +%d%H%M%S", shell=True, stdout=subprocess.PIPE, universal_newlines=True).communicate()[0].strip()
    trim_ss = str(input("Start trim at time? ") or '0') # Specify trim start time 
    no_of_sec = str(input("How many secondsto trim? ") or '10') # No of seconds to trim
    print()

    #txt_summ = open(f"{rnd_no}-99-summary.txt", "a")

    # Trim original video file
    cmd_ff = "ffmpeg -v fatal -hide_banner -stats -ss " + trim_ss +  " -i \"" + filename + "\" -t " + no_of_sec + " -c copy -avoid_negative_ts 1 -sn -map_chapters -1 " + rnd_no +"-00-ORIGINAL" + extn
    #encode_cmd_ff = subprocess.run(cmd_ff, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    encode_cmd_ff = subprocess.run(cmd_ff, shell=True, stderr=subprocess.PIPE)
    if encode_cmd_ff.returncode == 0:
        for crf in [23, 25, 28]:
            for pre in ['superfast', 'faster', 'medium']:
                print(f"Now encoding: {rnd_no}-{crf}-{pre}.mp4")
                cmd_ff_hevc = "ffmpeg -v fatal -hide_banner -stats -ss " + trim_ss +  " -i \"" + filename + "\" -t " + no_of_sec + " -c:v libx265 -crf:v " + str(crf) + " -preset " + pre + " -pix_fmt yuv444p10le -x265-params log-level=error -c:a aac -threads 0 -f mp4 " + rnd_no + "-" + str(crf) + "-" + pre + extn
                encode_cmd_ff_hevc = subprocess.run(cmd_ff_hevc, shell=True)
                print()
    #txt_summ.close()

## Encode videos to HEVC
def encode_videos(video_list):
    
    count = len(video_list) # Total no of videos
    cntr = 0 # Counter for each file
    if count != 0:
        crf = int(input('Enter CRF value (default is 28): ') or '28')
        print('Valid presets are ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow and placebo')
        preset = str(input('Choose preset (default is superfast): ') or 'superfast')
        print()
    else:
        print('No non-hevc videos to encode.')

    for vid in video_list:
        filename = vid['fname'] # Original file with path
        head, tail = os.path.split(filename) # Split path and filename
        base, extn = os.path.splitext(tail)  # split basename and extension
        filename_target = head + "/" + base + ".mp4" # Create taeget filename
        frames = vid['frame_count'] # Total frames in video
        size_k = int(vid['fsize_byte']/1024) # Size of video in KiB
        size_h = vid['fsize_human'] # Size of video in human
        dura_h = vid['duration_h']  # Duration of video in human
        aspect = str(vid['width'])+'x'+str(vid['height']) # Dimension of video
        codec = vid['format'] # Codec of video
        cntr += 1 # Counter of video processing
        color_cntr = colored("Encoding  :", 'yellow', attrs=['bold']) + " " + colored(f'{cntr}/{count}', 'cyan', attrs=['bold']) # Counter in color
        color_file = colored("Processing:", 'yellow', attrs=['bold']) + " " + colored(filename, 'cyan', attrs=['bold']) # Filename in color
        rnd_name = "/tmp/hevc" + str(random.randrange(1, 10**10)) + ".mp4" # Random filename
        cmd_ff = "ffmpeg -v error -hide_banner -stats -i \"" + filename + "\" -c:v libx265 -crf:v " + str(crf) + " -preset " + preset + " -pix_fmt yuv444p10le -x265-params log-level=error -c:a aac -threads 0 -f mp4 " + rnd_name

        print(color_cntr)
        print(color_file)
        print(colored(cmd_ff, 'magenta'))
        print(colored(f"FRAMES= {frames},   SIZE={size_h}, SIZE={size_k} KiB, TIME={dura_h}, ASPECT={aspect}, CODEC={codec}", 'yellow', attrs=['bold']))
        encode_start = subprocess.run(cmd_ff, shell=True)
        if encode_start.returncode == 0:
            cmd_rm = subprocess.run(f"rm -f \"{filename}\"", shell=True)
            if cmd_rm.returncode == 0:
                cmd_cp = subprocess.run(f"mv -f '{rnd_name}' \"{filename_target}\"", shell=True)
                if cmd_cp.returncode != 0:
                    sys.exit("Error! couldn't copy")
            else:
                sys.exit("Error! couldn't remove original video")
        else:
            sys.exit("Encode error")
        print()

## Assign command arguments
def parse_options():
    help_msg = 'Encode videos to HEVC 10Bit'
    parser = argparse.ArgumentParser(description=help_msg)
    group = parser.add_mutually_exclusive_group(required=True)

    # Show summary of all videos
    group.add_argument(
            '-s', 
            dest='sum_vids', 
            nargs='?', 
            action='store', 
            const=PWD, 
            metavar='PATH', 
            help='Summary of videos information'
            )

    # Show all videos
    group.add_argument(
            '-a', 
            dest='all_vids', 
            nargs='?', 
            action='store', 
            const=PWD, 
            metavar='PATH', 
            help='List all videos'
            )

    # Show only HEVC videos
    group.add_argument(
            '-H', 
            dest='hvc_vids', 
            nargs='?', 
            action='store', 
            const=PWD, 
            metavar='PATH', 
            help='List HEVC videos only'
            )

    # Show other videos which are not HEVC
    group.add_argument(
            '-o', 
            dest='oth_vids', 
            nargs='?', 
            action='store', 
            const=PWD, 
            metavar='PATH', 
            help='List other videos. Exclude all HEVC videos'
            )

    # Encode videos to HEVC
    group.add_argument(
            '-e', 
            dest='enc_vids', 
            nargs='?', 
            action='store', 
            const=PWD, 
            metavar='PATH', 
            help='Encode videos to HEVC 10bit'
            )

    # Test different encoding settings
    group.add_argument(
            '-t', 
            dest='tst_vids', 
            action='store', 
            metavar='FILE', 
            help='Test different encoding settings for HEVC'
            )

    # Set recursive on or off
    parser.add_argument(
            '-r', 
            dest='rcr_vids', 
            action='store_true', 
            help='Set recursive option ON'
            )

    return parser.parse_args()

def main():
    args = parse_options() # Passed arguments
    video_files = [] # Empty list to hold videos

    # Summary of Videos
    if args.sum_vids:
        #files = get_videos(args.sum_vids, args.rcr_vids)
        files = get_videos(args.sum_vids, True)
        print_summary(files, args.sum_vids)

    # All Videos display
    if args.all_vids:
        files = get_videos(args.all_vids, args.rcr_vids)
        files_mi_full = get_videos_mi_full(files, 'ALL')
        print_videos(files_mi_full)

    # HEVC Videos display
    if args.hvc_vids:
        files = get_videos(args.hvc_vids, args.rcr_vids)
        files_mi_full = get_videos_mi_full(files, 'HEVC')
        print_videos(files_mi_full)

    # Other videos display
    if args.oth_vids:
        files = get_videos(args.oth_vids, args.rcr_vids)
        files_mi_full = get_videos_mi_full(files, 'OTHER')
        print_videos(files_mi_full)

    # Encode videos to HEVC
    if args.enc_vids:
        files = get_videos(args.enc_vids, args.rcr_vids)
        files_mi_full = get_videos_mi_full(files, 'OTHER')
        encode_videos(files_mi_full)

    # Test different encoding settings
    if args.tst_vids:
        test_crfs(args.tst_vids)

if __name__ == '__main__':
    main()

