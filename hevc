#!/usr/bin/env python3
""" Encode video files to HEVC 10Bit video. """

import os
import argparse
from pymediainfo import MediaInfo as mi
from termcolor import colored
import datetime
import humanfriendly as hf

# Valid extensions
EXTN = ['.avi', '.flv', '.mkv', '.mov', '.mp4', '.mpeg', '.mpg', '.webm', '.wmv']
PWD = os.getcwd() # Get Present Working Directory

## Function to get a list of videos from a path
#  returns a list
def get_videos(path, recur):

    videos_list = [] # List of video file with extensions as in EXTN

    # Get video files within a directory
    for root, dirs, files in os.walk(path):
        dirs.sort()
        for filename in sorted(files):
            for ext in EXTN:
                if filename.lower().endswith(ext.lower()):
                    videos_list.append(os.path.join(root, filename))
        if not recur:
            break

    return videos_list
        
## Function to get a list of dictionary records of videos with MediaInfo
#  returns a list with dictionary records
def get_videos_mi_full(videos_list, flag):

    videos_list_mi_full = [] # List of dictionary with MediaInfo
    tmp_dict1 = {} # Temporary dict to hold MI Video info
    tmp_dict2 = {} # Temporary dict to hold MI General info

    # For every video in list 'videos_list' get mediainfo in dictionary format
    for video in videos_list:
        mediainfo = mi.parse(video)
        for track in mediainfo.tracks:
            if track.track_type == 'Video':
                tmp_dict1 = {
                        "fname": video,
                        "format": track.format,
                        "width": track.width,
                        "height": track.height,
                        "duration": float(track.duration),
                        "duration_h": track.other_duration[3],
                        "framerate": float(track.frame_rate)
                        }
            elif track.track_type == 'General':
                tmp_dict2 = {
                        "fsize_byte": int(track.file_size),
                        "fsize_human": track.other_file_size[0]
                        }
        tmp_dict1.update(tmp_dict2) # Join tmp_dict1 + tmp_dict2
        videos_list_mi_full.append(tmp_dict1) # Append dictionary into the list


    # According to flags remove dictionary records from list videos_list
    if flag == 'ALL':
        return videos_list_mi_full
    elif flag == 'HEVC':
        videos_list_mi_full = [rec for rec in videos_list_mi_full if rec.get('format') == 'HEVC']
        return videos_list_mi_full
    if flag == 'OTHER':
        videos_list_mi_full = [rec for rec in videos_list_mi_full if rec.get('format') != 'HEVC']
        return videos_list_mi_full

## Print summary information
def print_summary(video_list, path):
    count = len(video_list) # Total number of files
    videos_list_summ = [] # List of dictionary with MediaInfo
    tmp_dict1 = {} # Temporary dict to hold MI Video info
    tmp_dict2 = {} # Temporary dict to hold MI General info
    dur_s = 0.0 # Total duration, set to float
    size_b = 0  # Total size, set to int
    
    # For every video in list 'videos_list_sum' get mediainfo
    for video in video_list:
        mediainfo = mi.parse(video)
        for track in mediainfo.tracks:
            if track.track_type == 'Video':
                tmp_dict1 = {
                        "duration": float(track.duration),
                        }
            elif track.track_type == 'General':
                tmp_dict2 = {
                        "fsize_byte": int(track.file_size),
                        }
        tmp_dict1.update(tmp_dict2) # Join tmp_dict1 + tmp_dict2
        videos_list_summ.append(tmp_dict1) # Append dictionary into the list

    # Loop through list and calculate totals
    for vid in videos_list_summ:
        dur_s += vid['duration']
        size_b += vid['fsize_byte']

    dur_in_time = str(datetime.timedelta(milliseconds = dur_s)) # Milliseconds to time
    dur_in_time = dur_in_time.split('.', 1)[0] # Trim nanoseconds
    size_in_human = hf.format_size(size_b, binary=True) # Size

    # Print summary
    print(f"Total of {colored(count, 'yellow', attrs=['bold'])} videos, {colored(dur_in_time, 'yellow', attrs=['bold'])} hours of runtime, and {colored(size_in_human, 'yellow', attrs=['bold'])} in size.")

    # Print output of find command
    path = '"' + path + '"' # Insert double quotes around path variable
    cmd = 'find ' + path + ' -type f | grep -o ".[^.]\+$" | sort | uniq -c'
    abc = os.system(cmd)


## Print al videos in list mode
def print_videos(video_list):
    slno = 1
    dur_s = 0.0
    size_b = 0

    # Print header
    print(colored('SL# CODE DIMENSION   DURATION       SIZE   FILENAME', 'yellow', attrs=['bold']))

    # Loop through list and print content
    for vid in video_list:
        codec = vid['format'][:4]
        aspect = str(vid['width'])+'x'+str(vid['height'])
        dur_s += vid['duration']
        dur_h = vid['duration_h']
        size_b += vid['fsize_byte']
        size_h = vid['fsize_human']
        filename = vid['fname'].replace(PWD, '.', 1)

        print(f"{slno:0>3d} {codec:4s} {aspect:9s} {dur_h:12s} {size_h:>10s} {filename}")
        slno += 1

    # Print Tail
    dur_in_time = str(datetime.timedelta(milliseconds = dur_s))[:-3]
    size_in_human = hf.format_size(size_b, binary=True)
    print(colored("                   ------------ ----------", 'cyan', attrs=['bold']))
    print(colored(f'{" ":18s} {dur_in_time:>12s} {size_in_human:>10s}', 'yellow', attrs=['bold']))

## Assign command arguments
def parse_options():
    help_msg = 'Encode videos to HEVC 10Bit'
    parser = argparse.ArgumentParser(description=help_msg)
    group = parser.add_mutually_exclusive_group(required=True)

    # Show summary of all videos
    group.add_argument(
            '-s', 
            dest='sum_vids', 
            nargs='?', 
            action='store', 
            const=PWD, 
            metavar='PATH', 
            help='Summary of videos information'
            )

    # Show all videos
    group.add_argument(
            '-a', 
            dest='all_vids', 
            nargs='?', 
            action='store', 
            const=PWD, 
            metavar='PATH', 
            help='List all videos'
            )

    # Show only HEVC videos
    group.add_argument(
            '-H', 
            dest='hvc_vids', 
            nargs='?', 
            action='store', 
            const=PWD, 
            metavar='PATH', 
            help='List HEVC videos only'
            )

    # Show other videos which are not HEVC
    group.add_argument(
            '-o', 
            dest='oth_vids', 
            nargs='?', 
            action='store', 
            const=PWD, 
            metavar='PATH', 
            help='List other videos. Exclude all HEVC videos'
            )

    # Encode videos to HEVC
    group.add_argument(
            '-e', 
            dest='enc_vids', 
            nargs='?', 
            action='store', 
            const=PWD, 
            metavar='PATH', 
            help='Encode videos to HEVC 10bit'
            )

    # Set recursive on or off
    parser.add_argument(
            '-r', 
            dest='rcr_vids', 
            action='store_true', 
            help='Set recursive option ON'
            )

    return parser.parse_args()

def main():
    args = parse_options() # Passed arguments
    video_files = [] # Empty list to hold videos

    # Summary of Videos
    if args.sum_vids:
        #files = get_videos(args.sum_vids, args.rcr_vids)
        files = get_videos(args.sum_vids, True)
        print_summary(files, args.sum_vids)

    # All Videos display
    if args.all_vids:
        files = get_videos(args.all_vids, args.rcr_vids)
        files_mi_full = get_videos_mi_full(files, 'ALL')
        print_videos(files_mi_full)

    # HEVC Videos display
    if args.hvc_vids:
        files = get_videos(args.hvc_vids, args.rcr_vids)
        files_mi_full = get_videos_mi_full(files, 'HEVC')
        print_videos(files_mi_full)

    # Other videos display
    if args.oth_vids:
        files = get_videos(args.oth_vids, args.rcr_vids)
        files_mi_full = get_videos_mi_full(files, 'OTHER')
        print_videos(files_mi_full)

    # Encode videos to HEVC
    if args.enc_vids:
        print("To be continued...")


if __name__ == '__main__':
    main()

