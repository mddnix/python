#!/usr/bin/env python3
""" Encode video files to HEVC 10Bit video. """

import os
import argparse
from pymediainfo import MediaInfo as mi

# Valid extensions
EXTN = ['.avi', '.flv', '.mkv', '.mov', '.mp4', '.mpeg', '.mpg', '.webm', '.wmv']
PWD = os.getcwd() # Get Present Working Directory

def get_video_info(path, recur, flag):
    videos_list = [] # List of video file with extensions as in EXTN
    videos_list_mi = [] # List of dictionary with MediaInfo from videos_list list
    tmp_dict1 = {} # Temporary dict to hold MI Video info
    tmp_dict2 = {} # Temporary dict to hold MI General info

    # Get video files within a directory
    for root, dirs, files in os.walk(path):
        for filename in files:
            for ext in EXTN:
                if filename.lower().endswith(ext.lower()):
                    videos_list.append(os.path.join(root, filename))
        if not recur:
            break

    # Sort list by name
    videos_list.sort()

    # For every video in list 'videos_list' get mediainfo in dictionary format
    for video in videos_list:
        mediainfo = mi.parse(video)
        for track in mediainfo.tracks:
            if track.track_type == 'Video':
                tmp_dict1 = {
                        "fname": video,
                        "format": track.format,
                        "width": track.width,
                        "height": track.height,
                        "duration": (float(track.duration) / 1000),
                        "duration_h": track.other_duration[3],
                        "framerate": float(track.frame_rate)
                        }
            elif track.track_type == 'General':
                tmp_dict2 = {
                        "fsize_byte": int(track.file_size),
                        "fsize_human": track.other_file_size[0]
                        }
        tmp_dict1.update(tmp_dict2) # Join tmp_dict1 + tmp_dict2
        videos_list_mi.append(tmp_dict1) # Append dictionary into the list


    # According to flags remove dictionat records from list videos_list


    return videos_list_mi




def parse_options():
    help_msg = 'Encode videos to HEVC 10Bit'
    parser = argparse.ArgumentParser(description=help_msg)
    group = parser.add_mutually_exclusive_group(required=True)

    group.add_argument('-a', dest='all_vids', nargs='?', action='store', const=PWD, metavar='PATH', help='List all videos')
    group.add_argument('-H', dest='hvc_vids', nargs='?', action='store', const=PWD, metavar='PATH', help='List HEVC videos only')
    group.add_argument('-o', dest='oth_vids', nargs='?', action='store', const=PWD, metavar='PATH', help='List other videos. Exclude all HEVC videos')
    group.add_argument('-e', dest='enc_vids', nargs='?', action='store', const=PWD, metavar='PATH', help='Encode videos to HEVC 10bit')
    parser.add_argument('-r', dest='rcr_vids', action='store_true', help='Set recursive option ON')

    return parser.parse_args()

def main():
    args = parse_options()
    video_files = []
    if args.all_vids:
        flag = 'ALL'
        video_files = get_video_info(args.all_vids, args.rcr_vids, flag)

    for i in video_files:
        print(i)


if __name__ == '__main__':
    main()

