#!/usr/bin/env python3
""" Encode video file(s) recursively to HEVC 10Bit video. """

import os
import argparse
from pymediainfo import MediaInfo as mi

__author__     = "Madhusudhan D Desai"
__copyright__  = "Copyright 2020, mddnix"
__license__    = "GPL"
__version__    = "1.0"
__maintainer__ = "Madhusudhan D Desai"
__email__      = "mddnix@gmail.com"
__status__     = "Production"

# Valid extensions
EXTN = ('.avi', '.flv', '.mkv', '.mov', '.mp4', 
        '.mpeg', '.mpg', '.webm', '.wmv')

PWD = os.getcwd()


# Find all video files in a directory and store them in a list.
# @param: Path where the script should run.
# @param: Recursive or not. 
# @return List of all video files.
def get_videos(path, recursive, flag):

    videos = []
    videos_mi = []

    if recursive:
        for root, dirs, files in os.walk(path):
            for filename in files:
                for ext in EXTN:
                    if filename.lower().endswith(ext.lower()):
                        videos.append(os.path.join(root, filename))
    else:
        for root, dirs, files in os.walk(path):
            for filename in files:
                for ext in EXTN:
                    if filename.lower().endswith(ext.lower()):
                        videos.append(os.path.join(root, filename))
            break
    videos_mi = get_media_info(sorted(videos), flag) 
    return videos_mi

def get_media_info(video_list, flag):
    track_video = {}
    track_general = {}
    videos_mi = []
    for video in video_list:
        media_info = mi.parse(video)
        for track in media_info.tracks:
            if track.track_type == 'Video':
                track_video = {"fname": video, "format": track.format, "width": track.width, "height": track.height, "duration": (float(track.duration) / 1000), "framerate": float(track.frame_rate)}
            elif track.track_type == 'General':
                track_general = {"fsize_byte": int(track.file_size), "fsize_human": track.other_file_size[0]}
        track_video.update(track_general)
        videos_mi.append(track_video)

    return videos_mi





def parse_options():
    help_msg = 'Encode videos to HEVC 10Bit'
    parser = argparse.ArgumentParser(description=help_msg)
    group = parser.add_mutually_exclusive_group(required=True)

    group.add_argument(
            '-a',
            dest='all_vids',
            nargs='?',
            action='store',
            const=PWD,
            metavar='PATH',
            help='List all videos'
            )
    group.add_argument(
            '-H',
            dest='hvc_vids',
            nargs='?',
            action='store',
            const=PWD,
            metavar='PATH',
            help='List HEVC videos only'
            )
    group.add_argument(
            '-o',
            dest='oth_vids',
            nargs='?',
            action='store',
            const=PWD,
            metavar='PATH',
            help='List other videos. Exclude all HEVC videos'
            )
    group.add_argument(
            '-e',
            dest='enc_vids',
            nargs='?',
            action='store',
            const=PWD,
            metavar='PATH',
            help='Encode videos to HEVC 10bit'
            )
    parser.add_argument(
            '-r',
            dest='rcr_vids',
            action='store_true',
            help='Set recursive option ON'
            )

    return parser.parse_args()



def main():
    args = parse_options()
    if args.all_vids:
        flag = 'ALL'
        files = get_videos(args.all_vids, args.rcr_vids, flag)
        for i in files:
            print(i)

	


if __name__ == '__main__':
    main()



### Some other statements which can be used later
#print(track.to_data().keys())
